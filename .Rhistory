genepos = genepos,
cisDist = cisDist,
pvalue.hist = "qqplot",
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE)
library(dplyr)
snp_values = read.table(SNP_file_name, row.names=1, header=TRUE)
snp_values = data.frame(snps = rownames(snp_values), snp_values, stringsAsFactors = FALSE)
top_eqtls = filter(me$cis$eqtls, FDR <= 0.05) %>%
arrange(FDR) %>%
distinct(gene, .keep_all = TRUE)
mafs = apply(as.matrix(snp_values[-1]),1,mean)/2
mafs = pmin(mafs, 1 - mafs)
mafs = data.frame(snps=names(mafs), maf = mafs)
top_eqtls = left_join(top_eqtls, mafs, by="snps")
head(top_eqtls)
gene_values = read.table(expression_file_name, row.names=1, header=TRUE)
gene_values = read.table(expression_file_name, row.names=1, header=TRUE)
gene_values = data.frame(gene = rownames(gene_values), gene_values, stringsAsFactors = FALSE)
top_snp = top_eqtls$snps[1]
top_gene = as.character(top_eqtls$gene[1])
top_snp_data = filter(snp_values, snps == top_snp)
top_gene_data = filter(gene_values, gene == top_gene)
plot_data = t(bind_rows(top_snp_data[-1], top_gene_data[-1]))
colnames(plot_data) = c("snp", "gene_expr")
plot_data = as.data.frame(plot_data)
plot_data$snp = as.factor(plot_data$snp)
head(plot_data)
lm_top = lm(plot_data[,"gene_expr"] ~ as.numeric(plot_data[,"snp"]))
summary(lm_top)
plot(plot_data, col="steelblue",
main = paste0(top_gene, " vs ", top_snp))
abline(lm_top, col="darkorange", lwd = 2, lty = 2)
y_range = range(plot_data[,"gene_expr"])
text(x=2, y=y_range[1] + 0.5*diff(y_range), paste0("p=",
format(summary(lm_top)$coefficients[2,4],
scentific=TRUE, digits=2)), col = "darkorange")
top_eqtls$pvalue
plot_data
plot_data
top_eqtls
top_snp = top_eqtls$snps[39]
top_gene = as.character(top_eqtls$gene[39])
top_snp_data = filter(snp_values, snps == top_snp)
top_gene_data = filter(gene_values, gene == top_gene)
plot_data = t(bind_rows(top_snp_data[-1], top_gene_data[-1]))
colnames(plot_data) = c("snp", "gene_expr")
plot_data = as.data.frame(plot_data)
plot_data$snp = as.factor(plot_data$snp)
head(plot_data)
lm_top = lm(plot_data[,"gene_expr"] ~ as.numeric(plot_data[,"snp"]))
summary(lm_top)
plot(plot_data, col="steelblue",
main = paste0(top_gene, " vs ", top_snp))
abline(lm_top, col="darkorange", lwd = 2, lty = 2)
y_range = range(plot_data[,"gene_expr"])
text(x=2, y=y_range[1] + 0.5*diff(y_range), paste0("p=",
format(summary(lm_top)$coefficients[2,4],
scentific=TRUE, digits=2)), col = "darkorange")
plot_data
top_eqtls
gene_values = read.table(expression_file_name, row.names=1, header=TRUE)
gene_values = data.frame(gene = rownames(gene_values), gene_values, stringsAsFactors = FALSE)
top_snp = top_eqtls$snps[96]
top_gene = as.character(top_eqtls$gene[96])
top_snp_data = filter(snp_values, snps == top_snp)
top_gene_data = filter(gene_values, gene == top_gene)
plot_data = t(bind_rows(top_snp_data[-1], top_gene_data[-1]))
colnames(plot_data) = c("snp", "gene_expr")
plot_data = as.data.frame(plot_data)
plot_data$snp = as.factor(plot_data$snp)
head(plot_data)
lm_top = lm(plot_data[,"gene_expr"] ~ as.numeric(plot_data[,"snp"]))
summary(lm_top)
plot(plot_data, col="steelblue",
main = paste0(top_gene, " vs ", top_snp))
abline(lm_top, col="darkorange", lwd = 2, lty = 2)
y_range = range(plot_data[,"gene_expr"])
text(x=2, y=y_range[1] + 0.5*diff(y_range), paste0("p=",
format(summary(lm_top)$coefficients[2,4],
scentific=TRUE, digits=2)), col = "darkorange")
snps0 = read.table("data/e3/genotype.chr22.fin.txt", header = T)
snps <- snps0[, -1]
rownames(snps) <- snps0[, 1]
snps <- t(snps)
dim(snps)
top_eqtls
head(me$cis$eqtls)
temp <- head(me$cis$eqtls)
top_snp = temp$snps[1]
top_gene = as.character(temp$gene[1])
top_snp_data = filter(snp_values, snps == top_snp)
top_gene_data = filter(gene_values, gene == top_gene)
plot_data = t(bind_rows(top_snp_data[-1], top_gene_data[-1]))
c
plot_data
top_snp = temp$snps[5]
top_snp_data = filter(snp_values, snps == top_snp)
top_snp_data
dim(snos)
dim(snps)
length(maf)
length(maf[maf < 0.05])
hist(maf, main = "Distribution of MAF.", col = "steelblue")
a <- read.table("snps_location_file_name <- "data/e3/snp.chr22.loc.txt"")
maf[1:10]
dim(snps)
names(maf) <- colnames(snps)
maf[1:10]
snpf <- read.table("data/e3/genotype.chr22.fin.txt", header = T)
head(snpf)
sid <- names(maf[maf > 0.05])
snpf.filtered <- snpf[snpf$id %in% sid,]
dim(snpf.filtered)
snplocf <- read.table("data/e3/snp.chr22.loc.txt", header = T)
head(snplocf)
sid <- names(maf[maf > 0.05])
snpf <- read.table("data/e3/genotype.chr22.fin.txt", header = T)
snpf.filtered <- snpf[snpf$id %in% sid,]
snplocf <- read.table("data/e3/snp.chr22.loc.txt", header = T)
snplocf.filtered <- snplocf$snp[snplocf$snp %in% sid, ]
write.table(snpf.filtered, file = "output/genotype.chr22.fin.maf0.05.txt", sep = "\t", row.names = F, col.names = T, quote = F)
write.table(snplocf.filtered, file = "output/snp.chr22.maf0.05.loc.txt", sep = "\t", row.names = F, col.names = T, quote = F)
snplocf.filtered <- snplocf[snplocf$snp %in% sid, ]
write.table(snpf.filtered, file = "output/genotype.chr22.fin.maf0.05.txt", sep = "\t", row.names = F, col.names = T, quote = F)
write.table(snplocf.filtered, file = "output/snp.chr22.maf0.05.loc.txt", sep = "\t", row.names = F, col.names = T, quote = F)
SNP_file_name <-  "output/genotype.chr22.fin.maf0.05.txt";
snps_location_file_name <- "output/snp.chr22.maf0.05.loc.txt";
expression_file_name <- "data/e3/gene_exp.fin.chr22.txt";
gene_location_file_name <- "data/e3/gene.chr22.loc.txt";
covariates_file_name <- "output/eqtl-covariates.txt";
# Output file name
output_file_name_cis = "output/MatrixEQTL-cis.txt";
output_file_name_tra = "output/MatrixEQTL-trans.txt";
## Settings
# Linear model to use, modelANOVA, modelLINEAR, or modelLINEAR_CROSS
useModel = modelLINEAR; # modelANOVA, modelLINEAR, or modelLINEAR_CROSS
# Error covariance matrix
# Set to numeric() for identity.
errorCovariance = numeric();
# Distance for local gene-SNP pairs
cisDist = 1e6
# Only associations significant at this level will be saved
pvOutputThreshold_cis = 1e-5;
pvOutputThreshold_tra = 1e-5;
## Load genotype data
snps = SlicedData$new();
snps$fileDelimiter = "\t"; # the TAB character
snps$fileOmitCharacters = "NA"; # denote missing values;
snps$fileSkipRows = 1; # one row of column labels
snps$fileSkipColumns = 1; # one column of row labels
snps$fileSliceSize = 2000; # read file in slices of 2,000 rows
snps$LoadFile(SNP_file_name);
## Load gene expression data
gene = SlicedData$new();
gene$fileDelimiter = "\t"; # the TAB character
gene$fileOmitCharacters = "NA"; # denote missing values;
gene$fileSkipRows = 1; # one row of column labels
gene$fileSkipColumns = 1; # one column of row labels
gene$fileSliceSize = 2000; # read file in slices of 2,000 rows
gene$LoadFile(expression_file_name);
## Load covariates
cvrt = SlicedData$new();
cvrt$fileDelimiter = "\t"; # the TAB character
cvrt$fileOmitCharacters = "NA"; # denote missing values;
cvrt$fileSkipRows = 1; # one row of column labels
cvrt$fileSkipColumns = 1; # one column of row labels
if(length(covariates_file_name)>0) {
cvrt$LoadFile(covariates_file_name);
}
## Run the analysis
snpspos = read.table(snps_location_file_name, header = TRUE, stringsAsFactors = FALSE);
genepos = read.table(gene_location_file_name, header = TRUE, stringsAsFactors = FALSE);
me = Matrix_eQTL_main(
snps = snps,
gene = gene,
cvrt = cvrt,
output_file_name = output_file_name_tra,
pvOutputThreshold = pvOutputThreshold_tra,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = FALSE,
output_file_name.cis = output_file_name_cis,
pvOutputThreshold.cis = pvOutputThreshold_cis,
snpspos = snpspos,
genepos = genepos,
cisDist = cisDist,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE);
me_qq = Matrix_eQTL_main(
snps = snps,
gene = gene,
cvrt = cvrt,
output_file_name = output_file_name_tra,
pvOutputThreshold = pvOutputThreshold_tra,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = FALSE,
output_file_name.cis = output_file_name_cis,
pvOutputThreshold.cis = pvOutputThreshold_cis,
snpspos = snpspos,
genepos = genepos,
cisDist = cisDist,
pvalue.hist = "qqplot",
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE)
cat('Analysis done in: ', me$time.in.sec, ' seconds', '\n');
head(me$cis$eqtls)
head(me$trans$eqtls)
## Make the histogram of local and distant p-values
plot(me)
## Make the qq-plot of local and distant p-values
plot(me_qq)
maf = colMeans(snps[,-1])/2
snps[,-1]
dim(snps)
snps0 = read.table("data/e3/genotype.chr22.fin.txt", header = T)
snps <- snps0[, -1]
rownames(snps) <- snps0[, 1]
snps <- t(snps)
maf = colMeans(snps[,-1])/2
gene_values = read.table(expression_file_name, row.names=1, header=TRUE)
gene_values = data.frame(gene = rownames(gene_values), gene_values, stringsAsFactors = FALSE)
top_snp = top_eqtls$snps[2]
top_gene = as.character(top_eqtls$gene[2])
top_snp_data = filter(snp_values, snps == top_snp)
top_gene_data = filter(gene_values, gene == top_gene)
plot_data = t(bind_rows(top_snp_data[-1], top_gene_data[-1]))
colnames(plot_data) = c("snp", "gene_expr")
plot_data = as.data.frame(plot_data)
plot_data$snp = as.factor(plot_data$snp)
head(plot_data)
lm_top = lm(plot_data[,"gene_expr"] ~ as.numeric(plot_data[,"snp"]))
summary(lm_top)
plot(plot_data, col="steelblue",
main = paste0(top_gene, " vs ", top_snp))
abline(lm_top, col="darkorange", lwd = 2, lty = 2)
y_range = range(plot_data[,"gene_expr"])
text(x=2, y=y_range[1] + 0.5*diff(y_range), paste0("p=",
format(summary(lm_top)$coefficients[2,4],
scentific=TRUE, digits=2)), col = "darkorange")
genelocf <- read.table("data/e3/gene.chr22.loc.txt", header = T)
head(genelocf)
head(snplocf)
snps <- read.table("data/e3/genotype.chr22.fin.txt", header = T)
head(snps)
library(susieR)
data(N3finemapping)
attach(N3finemapping)
cim(X)
dim(X)
library(susieR)
data(N3finemapping)
attach(N3finemapping)
dim(X)
library(susieR)
data(N2finemapping)
attach(N2finemapping)
rm(X)
rm('X')
library(susieR)
data(N2finemapping)
X
attach(N2finemapping)
dim(X)
knitr::opts_chunk$set(echo = TRUE)
h2.eQTL <- 0.3
n.eQTL <- 2
gamma <- 0
theta <- 0.18
data <- simulate(G, h2.eQTL, n.eQTL, gamma, theta)
library(coloc)
library(coloc)
data(coloc_test_data)
attach(coloc_test_data)
D1
names(D1)
library(susieR)
data(N2finemapping)
attach(N2finemapping)
G <- scale(X)
N <- nrow(G)
M <- ncol(G)
set.seed(123)
knitr::opts_chunk$set(echo = TRUE)
library(susieR)
data(N2finemapping)
attach(N2finemapping)
G <- scale(X)
N <- nrow(G)
M <- ncol(G)
set.seed(123)
library(MASS)
library(glmnet)
# Simulation function
# G: genotype matrix. h2.eQTL: h2 of eQTL. n.eQTL: number of eQTL SNPs. gamma: effect size of gene. theta: effect size of SNP.
simulate <- function(G, h2.eQTL, n.eQTL, gamma, theta) {
N <- dim(G)[1]
M <- dim(G)[2]
idx.eQTL <- sample(1:M, n.eQTL)
alpha <- rep(sqrt(h2.eQTL/n.eQTL), n.eQTL)
# simulate gene expression data
X <- G[, idx.eQTL] %*% alpha + rnorm(N, sd=1)
# simulate phenotype data
idx.SNP <- idx.eQTL[1] # choose a SNP that is one eQTL
Y <- X * gamma + as.matrix(G[, idx.SNP]) %*% theta + rnorm(N)
# return results
return (list(X=X, Y=Y, idx.eQTL=idx.eQTL, idx.SNP))
}
h2.eQTL <- 0.3
n.eQTL <- 2
gamma <- 0.18
theta <- 0
data1 <- simulate(G, h2.eQTL, n.eQTL, gamma, theta)
cvfit <- cv.glmnet(G, data1$X)
X.tilde <- predict(cvfit, G, s = "lambda.min")
plot(data1$X, X.tilde, xlab = )
h2.eQTL <- 0.3
n.eQTL <- 2
gamma <- 0
theta <- 0.18
data2 <- simulate(G, h2.eQTL, n.eQTL, gamma, theta)
data2$idx.eQTL
var(data2$Y)
a <- lm(data2$Y ~ data2$X[,1])
summary(a)
coef(a)
coefficients(a)
a <- summary(a)
a$coefficients
a$coefficients[2,1]
regression <- apply(data1$X, 2, function(z)summary(lm(data1$Y~z)))
beta <- sapply(regression, function(z) z$coefficients[2,1])
varbeta <- sapply(regression, function(z) z$coefficients[2,2])
d1 <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
d1
d1$beta <- sapply(regression, function(z) z$coefficients[2,1])
d1$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
dGWAS <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(data1$G, 2, function(z)summary(lm(data1$Y~z)))
dGWAS$beta <- sapply(regression, function(z) z$coefficients[2,1])
dGWAS$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
deQTL <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(data1$G, 2, function(z)summary(lm(data1$X~z)))
deQTL$beta <- sapply(regression, function(z) z$coefficients[2,1])
deQTL$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
colocres <- coloc.abf(dGWAS, deQTL)
dGWAS <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$Y~z)))
dGWAS$beta <- sapply(regression, function(z) z$coefficients[2,1])
dGWAS$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
deQTL <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$X~z)))
deQTL$beta <- sapply(regression, function(z) z$coefficients[2,1])
deQTL$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
colocres <- coloc.abf(dGWAS, deQTL)
library(coloc)
colocres <- coloc.abf(dGWAS, deQTL)
regression
dGWAS$beta
regression[[1000]]
regression[[1000]]$coefficients
regression[[1000]]$coefficients[2,1]
regression[[1000]]$coefficients[2,2]
var(data1$Y)
dim(data1$Y)
var(data1$Y[,1])
dGWAS <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1.1)
regression <- apply(G, 2, function(z)summary(lm(data1$Y~z)))
dGWAS$beta <- sapply(regression, function(z) z$coefficients[2,1])
dGWAS$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
deQTL <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$X~z)))
deQTL$beta <- sapply(regression, function(z) z$coefficients[2,1])
deQTL$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
colocres <- coloc.abf(dGWAS, deQTL)
dGWAS <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$Y~z)))
dGWAS$beta <- sapply(regression, function(z) z$coefficients[2,1])
dGWAS$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
regression
dGWAS$beta[1000]
dGWAS$beta
library(susieR)
data(N2finemapping)
attach(N2finemapping)
G <- scale(X)
N <- nrow(G)
M <- ncol(G)
set.seed(123)
library(MASS)
library(glmnet)
# Simulation function
# G: genotype matrix. h2.eQTL: h2 of eQTL. n.eQTL: number of eQTL SNPs. gamma: effect size of gene. theta: effect size of SNP.
simulate <- function(G, h2.eQTL, n.eQTL, gamma, theta) {
N <- dim(G)[1]
M <- dim(G)[2]
idx.eQTL <- sample(1:M, n.eQTL)
alpha <- rep(sqrt(h2.eQTL/n.eQTL), n.eQTL)
# simulate gene expression data
X <- G[, idx.eQTL] %*% alpha + rnorm(N, sd=1)
# simulate phenotype data
idx.SNP <- idx.eQTL[1] # choose a SNP that is one eQTL
Y <- X * gamma + as.matrix(G[, idx.SNP]) %*% theta + rnorm(N)
# return results
return (list(X=X, Y=Y, idx.eQTL=idx.eQTL, idx.SNP))
}
h2.eQTL <- 0.3
n.eQTL <- 2
gamma <- 0.18
theta <- 0
data1 <- simulate(G, h2.eQTL, n.eQTL, gamma, theta)
cvfit <- cv.glmnet(G, data1$X)
X.tilde <- predict(cvfit, G, s = "lambda.min")
plot(data1$X, X.tilde, xlab = )
fit <- lm(data1$Y ~ X.tilde)
pvalue <- summary(fit)$coefficients["X.tilde",4]
print(pvalue)
h2.eQTL <- 0.3
n.eQTL <- 2
gamma <- 0
theta <- 0.18
data2 <- simulate(G, h2.eQTL, n.eQTL, gamma, theta)
cvfit <- cv.glmnet(G, data2$X)
X.tilde <- predict(cvfit, G, s = "lambda.min")
plot(data2$X, X.tilde)
fit <- lm(data2$Y ~ X.tilde)
pvalue <- summary(fit)$coefficients["X.tilde",4]
print(pvalue)
dGWAS <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$Y~z)))
dGWAS$beta <- sapply(regression, function(z) z$coefficients[2,1])
dGWAS$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
deQTL <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$X~z)))
deQTL$beta <- sapply(regression, function(z) z$coefficients[2,1])
deQTL$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
colocres <- coloc.abf(dGWAS, deQTL)
str(dGWAS)
dGWAS$beta[1000]
dGWAS$varbeta[1000]
dGWAS$varbeta[1002]
dGWAS$beta[1002]
regression[[1002]]
regression[[1002]]$coefficients
sapply(regression, function(z) z$coefficients[2,1])
dGWAS$beta <- sapply(regression, function(z) z$coefficients[2,1])
dGWAS$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
colocres <- coloc.abf(dGWAS, deQTL)
regression <- apply(G, 2, function(z)summary(lm(data1$Y~z)))
regression[[1002]]$coefficients
dGWAS$beta <- sapply(regression, function(z) z$coefficients[2,1])
dGWAS$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
colocres <- coloc.abf(dGWAS, deQTL)
h2.eQTL <- 0.8
n.eQTL <- 2
gamma <- 0.5
theta <- 0
data1 <- simulate(G, h2.eQTL, n.eQTL, gamma, theta)
dGWAS <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$Y~z)))
dGWAS$beta <- sapply(regression, function(z) z$coefficients[2,1])
dGWAS$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
deQTL <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$X~z)))
deQTL$beta <- sapply(regression, function(z) z$coefficients[2,1])
deQTL$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
colocres <- coloc.abf(dGWAS, deQTL)
h2.eQTL <- 0.3
n.eQTL <- 2
gamma <- 0.18
theta <- 0
data1 <- simulate(G, h2.eQTL, n.eQTL, gamma, theta)
dGWAS <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$Y~z)))
dGWAS$beta <- sapply(regression, function(z) z$coefficients[2,1])
dGWAS$varbeta <- sapply(regression, function(z) z$coefficients[2,2])/100
deQTL <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$X~z)))
deQTL$beta <- sapply(regression, function(z) z$coefficients[2,1])
deQTL$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
colocres <- coloc.abf(dGWAS, deQTL)
dGWAS <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$Y~z)))
dGWAS$beta <- sapply(regression, function(z) z$coefficients[2,1])
dGWAS$varbeta <- sapply(regression, function(z) z$coefficients[2,2])/400
colocres <- coloc.abf(dGWAS, deQTL)
deQTL <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$X~z)))
deQTL$beta <- sapply(regression, function(z) z$coefficients[2,1])
deQTL$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
regression[[1002]]
h2.eQTL <- 0.3
n.eQTL <- 2
gamma <- 0.18
theta <- 0
data1 <- simulate(G, h2.eQTL, n.eQTL, gamma, theta)
deQTL <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$X~z)))
deQTL$beta <- sapply(regression, function(z) z$coefficients[2,1])
deQTL$varbeta <- sapply(regression, function(z) z$coefficients[2,2])
dGWAS <- list("snp" = paste0("s", 1: ncol(G)), "position" = 1: ncol(G), "type" = "quant", "sdY" = 1)
regression <- apply(G, 2, function(z)summary(lm(data1$Y~z)))
dGWAS$beta <- sapply(regression, function(z) z$coefficients[2,1])
dGWAS$varbeta <- sapply(regression, function(z) z$coefficients[2,2])/400
colocres <- coloc.abf(dGWAS, deQTL)
regression
cvfit <- cv.glmnet(G, data1$X)
data1
X.tilde <- predict(cvfit, G, s = "lambda.min")
plot(data1$X, X.tilde )
